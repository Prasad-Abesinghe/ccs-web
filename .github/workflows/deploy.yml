# .github/workflows/build_push_deploy.yml
# ================================================================
#  Build â†’ Push to Azure Container Registry â†’ Deploy via Bastion
# ================================================================
name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - main         # run only for changes on main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  # ----------------------------------------------------------------
  # Registry / image references
  # ----------------------------------------------------------------
  ACR_SERVER: ${{ secrets.ACR_SERVER }}         # e.g. centralizeplatform.azurecr.io
  DOCKER_IMAGE_NAME: ${{ secrets.ACR_SERVER }}/ccs-web:latest

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 1) Checkout source
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 2) Set up Buildx
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 3) Log in to Azure Container Registry
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server:   ${{ env.ACR_SERVER }}
          username:       ${{ secrets.ACR_USERNAME }}
          password:       ${{ secrets.ACR_PASSWORD }}

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 4) Build & push the image (multiâ€‘arch example)
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
            --build-arg NEXT_PUBLIC_USE_DUMMY_DATA=${{ secrets.NEXT_PUBLIC_USE_DUMMY_DATA }} \
            --build-arg AZURE_AD_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }} \
            --build-arg AZURE_AD_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }} \
            --build-arg AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }} \
            --build-arg NEXT_PUBLIC_BACKEND_API_URL=${{ secrets.NEXT_PUBLIC_BACKEND_API_URL }} \
            --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            --build-arg NEXTAUTH_DEBUG=${{ secrets.NEXTAUTH_DEBUG }} \
            -t ${{ env.DOCKER_IMAGE_NAME }} \
            --push .

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # 5) Deploy through Bastion â†’ Private target server
      # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Deploy container via Bastion
        uses: appleboy/ssh-action@v0.1.8
        with:
          # === Target (private server) ===
          host:            ${{ secrets.REMOTE_HOST }}      # e.g. 10.0.0.5
          username:        ${{ secrets.REMOTE_USER }}      # e.g. ubuntu
          key:             ${{ secrets.REMOTE_SSH_KEY }}   # SSH key for the target
          port:            22

          # === Bastion / jump host ===
          proxy_host:      ${{ secrets.BASTION_HOST }}     # e.g. 52.x.x.x
          proxy_port:      22
          proxy_username:  ${{ secrets.BASTION_USER }}
          proxy_key:       ${{ secrets.BASTION_SSH_KEY }}
          proxy_timeout:   30s

          # === Commands executed *on the target* ===
          script: |
            set -euo pipefail
            echo "ðŸ”‘ Logging in to ACR"
            sudo docker login ${{ secrets.ACR_SERVER }} \
                             -u ${{ secrets.ACR_USERNAME }} \
                             -p ${{ secrets.ACR_PASSWORD }}

            echo "ðŸ›‘ Stopping old container (if exists)"
            sudo docker stop ccs-web || true
            sudo docker rm   ccs-web || true

            echo "ðŸ“¥ Pulling freshly built image"
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}

            echo "ðŸš€ Starting new container"
            sudo docker run -d --name ccs-web -p 8080:3000 \
                -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
                -e NEXTAUTH_DEBUG=${{ secrets.NEXTAUTH_DEBUG }} \
                -e AZURE_AD_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }} \
                -e AZURE_AD_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }} \
                -e AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }} \
                -e NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
                -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
                -e NEXT_PUBLIC_BACKEND_API_URL=${{ secrets.NEXT_PUBLIC_BACKEND_API_URL }} \
                ${{ env.DOCKER_IMAGE_NAME }}

            echo "âœ… Deployment finished"
